// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/kkdai/youtube/v2"
)

// MockYtdlr is a mock of Ytdlr interface.
type MockYtdlr struct {
	ctrl     *gomock.Controller
	recorder *MockYtdlrMockRecorder
}

// MockYtdlrMockRecorder is the mock recorder for MockYtdlr.
type MockYtdlrMockRecorder struct {
	mock *MockYtdlr
}

// NewMockYtdlr creates a new mock instance.
func NewMockYtdlr(ctrl *gomock.Controller) *MockYtdlr {
	mock := &MockYtdlr{ctrl: ctrl}
	mock.recorder = &MockYtdlrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYtdlr) EXPECT() *MockYtdlrMockRecorder {
	return m.recorder
}

// DownloadComposite mocks base method.
func (m *MockYtdlr) DownloadComposite(ctx context.Context, outputFile string, v *v2.Video, quality, mimetype, language string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadComposite", ctx, outputFile, v, quality, mimetype, language)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadComposite indicates an expected call of DownloadComposite.
func (mr *MockYtdlrMockRecorder) DownloadComposite(ctx, outputFile, v, quality, mimetype, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadComposite", reflect.TypeOf((*MockYtdlr)(nil).DownloadComposite), ctx, outputFile, v, quality, mimetype, language)
}

// GetPlaylist mocks base method.
func (m *MockYtdlr) GetPlaylist(url string) (*v2.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylist", url)
	ret0, _ := ret[0].(*v2.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylist indicates an expected call of GetPlaylist.
func (mr *MockYtdlrMockRecorder) GetPlaylist(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylist", reflect.TypeOf((*MockYtdlr)(nil).GetPlaylist), url)
}

// GetStreamContext mocks base method.
func (m *MockYtdlr) GetStreamContext(ctx context.Context, video *v2.Video, format *v2.Format) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamContext", ctx, video, format)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStreamContext indicates an expected call of GetStreamContext.
func (mr *MockYtdlrMockRecorder) GetStreamContext(ctx, video, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamContext", reflect.TypeOf((*MockYtdlr)(nil).GetStreamContext), ctx, video, format)
}

// GetVideo mocks base method.
func (m *MockYtdlr) GetVideo(url string) (*v2.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideo", url)
	ret0, _ := ret[0].(*v2.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideo indicates an expected call of GetVideo.
func (mr *MockYtdlrMockRecorder) GetVideo(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideo", reflect.TypeOf((*MockYtdlr)(nil).GetVideo), url)
}

// GetVideoContext mocks base method.
func (m *MockYtdlr) GetVideoContext(ctx context.Context, url string) (*v2.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoContext", ctx, url)
	ret0, _ := ret[0].(*v2.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoContext indicates an expected call of GetVideoContext.
func (mr *MockYtdlrMockRecorder) GetVideoContext(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoContext", reflect.TypeOf((*MockYtdlr)(nil).GetVideoContext), ctx, url)
}
