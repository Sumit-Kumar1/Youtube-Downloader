// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	models "ytdl_http/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// DownloadInfo mocks base method.
func (m *MockServicer) DownloadInfo(videoID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadInfo", videoID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadInfo indicates an expected call of DownloadInfo.
func (mr *MockServicerMockRecorder) DownloadInfo(videoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadInfo", reflect.TypeOf((*MockServicer)(nil).DownloadInfo), videoID)
}

// DownloadVideo mocks base method.
func (m *MockServicer) DownloadVideo(ctx context.Context, id, qual string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadVideo", ctx, id, qual)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadVideo indicates an expected call of DownloadVideo.
func (mr *MockServicerMockRecorder) DownloadVideo(ctx, id, qual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadVideo", reflect.TypeOf((*MockServicer)(nil).DownloadVideo), ctx, id, qual)
}

// GetInfo mocks base method.
func (m *MockServicer) GetInfo(url string) ([]models.VideoData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", url)
	ret0, _ := ret[0].([]models.VideoData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockServicerMockRecorder) GetInfo(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockServicer)(nil).GetInfo), url)
}

// GetStatus mocks base method.
func (m *MockServicer) GetStatus(videoID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", videoID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockServicerMockRecorder) GetStatus(videoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockServicer)(nil).GetStatus), videoID)
}
